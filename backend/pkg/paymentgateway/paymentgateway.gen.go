// Package paymentgateway provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package paymentgateway

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AdminDataClearResponse defines model for AdminDataClearResponse.
type AdminDataClearResponse struct {
	Message    *string                  `json:"message,omitempty"`
	Statistics *DatabaseClearStatistics `json:"statistics"`
	Success    *bool                    `json:"success,omitempty"`
}

// AdminStatusResponse defines model for AdminStatusResponse.
type AdminStatusResponse struct {
	AdminTokenConfigured *bool      `json:"adminTokenConfigured,omitempty"`
	ServerTime           *time.Time `json:"serverTime,omitempty"`
	ServiceVersion       *string    `json:"serviceVersion,omitempty"`
}

// BankTransactionDetailsDto defines model for BankTransactionDetailsDto.
type BankTransactionDetailsDto struct {
	AuthorizationCode *string `json:"authorizationCode"`
	BankTransactionId *string `json:"bankTransactionId"`
	ResponseCode      *string `json:"responseCode"`
	ResponseMessage   *string `json:"responseMessage"`
	Rrn               *string `json:"rrn"`
}

// CancelBankDetailsDto defines model for CancelBankDetailsDto.
type CancelBankDetailsDto struct {
	BankTransactionId             *string `json:"bankTransactionId"`
	CancellationAuthorizationCode *string `json:"cancellationAuthorizationCode"`
	OriginalAuthorizationCode     *string `json:"originalAuthorizationCode"`
	ResponseCode                  *string `json:"responseCode"`
	ResponseMessage               *string `json:"responseMessage"`
	Rrn                           *string `json:"rrn"`
}

// CancelItemDto defines model for CancelItemDto.
type CancelItemDto struct {
	Amount   *float64 `json:"amount,omitempty"`
	ItemId   string   `json:"itemId"`
	Quantity *float64 `json:"quantity,omitempty"`
	Reason   *string  `json:"reason"`
	Tax      *string  `json:"tax"`
}

// CancelReceiptDto defines model for CancelReceiptDto.
type CancelReceiptDto struct {
	ReceiptFFD105 *interface{} `json:"Receipt_FFD_105,omitempty"`
	ReceiptFFD12  *interface{} `json:"Receipt_FFD_12,omitempty"`
	Email         *string      `json:"email"`
	Phone         *string      `json:"phone"`
	Taxation      *string      `json:"taxation"`
}

// CancellationDetailsDto defines model for CancellationDetailsDto.
type CancellationDetailsDto struct {
	CancelledItems     *[]CancelledItemDto `json:"cancelledItems"`
	Data               *map[string]string  `json:"data"`
	ProcessingDuration *string             `json:"processingDuration"`
	Reason             *string             `json:"reason"`
	Warnings           *[]string           `json:"warnings"`
	WasForced          *bool               `json:"wasForced,omitempty"`
}

// CancelledItemDto defines model for CancelledItemDto.
type CancelledItemDto struct {
	CancelledAmount   *float64 `json:"cancelledAmount"`
	CancelledQuantity *float64 `json:"cancelledQuantity"`
	ItemId            *string  `json:"itemId"`
	Name              *string  `json:"name"`
	Reason            *string  `json:"reason"`
	Tax               *string  `json:"tax"`
}

// CheckCardDetailsDto defines model for CheckCardDetailsDto.
type CheckCardDetailsDto struct {
	CardBin     *string `json:"cardBin"`
	CardBrand   *string `json:"cardBrand"`
	CardCountry *string `json:"cardCountry"`
	CardMask    *string `json:"cardMask"`
	CardType    *string `json:"cardType"`
	IssuingBank *string `json:"issuingBank"`
}

// CheckCustomerInfoDto defines model for CheckCustomerInfoDto.
type CheckCustomerInfoDto struct {
	CustomerKey *string `json:"customerKey"`
	Email       *string `json:"email"`
	IpAddress   *string `json:"ipAddress"`
	Phone       *string `json:"phone"`
}

// CheckReceiptDto defines model for CheckReceiptDto.
type CheckReceiptDto struct {
	Content    *interface{} `json:"content,omitempty"`
	CreatedAt  *time.Time   `json:"createdAt"`
	ReceiptUrl *string      `json:"receiptUrl"`
	Status     *string      `json:"status"`
}

// CheckTransactionDto defines model for CheckTransactionDto.
type CheckTransactionDto struct {
	Amount            *float64   `json:"amount"`
	AuthorizationCode *string    `json:"authorizationCode"`
	ResponseCode      *string    `json:"responseCode"`
	ResponseMessage   *string    `json:"responseMessage"`
	Rrn               *string    `json:"rrn"`
	Status            *string    `json:"status"`
	Timestamp         *time.Time `json:"timestamp"`
	TransactionId     *string    `json:"transactionId"`
	Type              *string    `json:"type"`
}

// ConfirmItemDto defines model for ConfirmItemDto.
type ConfirmItemDto struct {
	Amount   *float64 `json:"amount,omitempty"`
	ItemId   string   `json:"itemId"`
	Quantity *float64 `json:"quantity,omitempty"`
	Tax      *string  `json:"tax"`
}

// ConfirmReceiptDto defines model for ConfirmReceiptDto.
type ConfirmReceiptDto struct {
	ReceiptFFD105 *interface{} `json:"Receipt_FFD_105,omitempty"`
	ReceiptFFD12  *interface{} `json:"Receipt_FFD_12,omitempty"`
	Email         *string      `json:"email"`
	Phone         *string      `json:"phone"`
}

// ConfirmationDetailsDto defines model for ConfirmationDetailsDto.
type ConfirmationDetailsDto struct {
	ConfirmedItems     *[]ConfirmedItemDto `json:"confirmedItems"`
	Data               *map[string]string  `json:"data"`
	Description        *string             `json:"description"`
	ProcessingDuration *string             `json:"processingDuration"`
}

// ConfirmedItemDto defines model for ConfirmedItemDto.
type ConfirmedItemDto struct {
	ConfirmedAmount   *float64 `json:"confirmedAmount"`
	ConfirmedQuantity *float64 `json:"confirmedQuantity"`
	ItemId            *string  `json:"itemId"`
	Name              *string  `json:"name"`
	Tax               *string  `json:"tax"`
}

// CustomerInfoDto defines model for CustomerInfoDto.
type CustomerInfoDto struct {
	CustomerKey *string `json:"customerKey"`
	Email       *string `json:"email"`
	IpAddress   *string `json:"ipAddress"`
	Phone       *string `json:"phone"`
	UserAgent   *string `json:"userAgent"`
}

// DatabaseClearStatistics defines model for DatabaseClearStatistics.
type DatabaseClearStatistics struct {
	ClearTimestamp      *time.Time `json:"clearTimestamp,omitempty"`
	DeletedOrders       *int32     `json:"deletedOrders,omitempty"`
	DeletedPayments     *int32     `json:"deletedPayments,omitempty"`
	DeletedTransactions *int32     `json:"deletedTransactions,omitempty"`
	OperationDurationMs *int32     `json:"operationDurationMs,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// FeeDetailsDto defines model for FeeDetailsDto.
type FeeDetailsDto struct {
	AcquirerFee   *float64 `json:"acquirerFee"`
	FeeCurrency   *string  `json:"feeCurrency"`
	NetworkFee    *float64 `json:"networkFee"`
	ProcessingFee *float64 `json:"processingFee"`
	TotalFees     *float64 `json:"totalFees"`
}

// MetricsSummaryResponse defines model for MetricsSummaryResponse.
type MetricsSummaryResponse struct {
	Categories   *map[string]int32 `json:"categories,omitempty"`
	Timestamp    *time.Time        `json:"timestamp,omitempty"`
	TotalMetrics *int32            `json:"totalMetrics,omitempty"`
}

// OrderItemDto defines model for OrderItemDto.
type OrderItemDto struct {
	Amount   *float64 `json:"amount,omitempty"`
	Category *string  `json:"category"`
	Name     string   `json:"name"`
	Price    *float64 `json:"price,omitempty"`
	Quantity *float64 `json:"quantity,omitempty"`
	Tax      *string  `json:"tax"`
}

// PaymentAmountsDto defines model for PaymentAmountsDto.
type PaymentAmountsDto struct {
	AuthorizedAmount *float64 `json:"authorizedAmount"`
	ConfirmedAmount  *float64 `json:"confirmedAmount"`
	OriginalAmount   *float64 `json:"originalAmount"`
	RefundedAmount   *float64 `json:"refundedAmount"`
	RemainingAmount  *float64 `json:"remainingAmount"`
	TotalFees        *float64 `json:"totalFees"`
}

// PaymentCancelRequestDto defines model for PaymentCancelRequestDto.
type PaymentCancelRequestDto struct {
	Amount        *float64           `json:"amount"`
	CorrelationId *string            `json:"correlationId"`
	Data          *map[string]string `json:"data"`
	Force         *bool              `json:"force,omitempty"`
	Items         *[]CancelItemDto   `json:"items"`
	PaymentId     string             `json:"paymentId"`
	Reason        *string            `json:"reason"`
	Receipt       *CancelReceiptDto  `json:"receipt"`
	TeamSlug      string             `json:"teamSlug"`
	Timestamp     *time.Time         `json:"timestamp,omitempty"`
	Token         string             `json:"token"`
	Version       *string            `json:"version,omitempty"`
}

// PaymentCancelResponseDto defines model for PaymentCancelResponseDto.
type PaymentCancelResponseDto struct {
	BankDetails      *CancelBankDetailsDto   `json:"bankDetails"`
	CancellationType *string                 `json:"cancellationType"`
	CancelledAmount  *float64                `json:"cancelledAmount"`
	CancelledAt      *time.Time              `json:"cancelledAt"`
	CorrelationId    *string                 `json:"correlationId"`
	Currency         *string                 `json:"currency"`
	Details          *CancellationDetailsDto `json:"details"`
	ErrorCode        *string                 `json:"errorCode"`
	Message          *string                 `json:"message"`
	OrderId          *string                 `json:"orderId"`
	OriginalAmount   *float64                `json:"originalAmount"`
	PaymentId        *string                 `json:"paymentId"`
	Refund           *RefundDetailsDto       `json:"refund"`
	RemainingAmount  *float64                `json:"remainingAmount"`
	Status           *string                 `json:"status"`
	Success          *bool                   `json:"success,omitempty"`
	Timestamp        *time.Time              `json:"timestamp,omitempty"`
	Version          *string                 `json:"version,omitempty"`
}

// PaymentCheckRequestDto defines model for PaymentCheckRequestDto.
type PaymentCheckRequestDto struct {
	CorrelationId       *string    `json:"correlationId"`
	IncludeCardDetails  *bool      `json:"includeCardDetails,omitempty"`
	IncludeCustomerInfo *bool      `json:"includeCustomerInfo,omitempty"`
	IncludeReceipt      *bool      `json:"includeReceipt,omitempty"`
	IncludeTransactions *bool      `json:"includeTransactions,omitempty"`
	Language            *string    `json:"language,omitempty"`
	OrderId             *string    `json:"orderId"`
	PaymentId           *string    `json:"paymentId"`
	TeamSlug            string     `json:"teamSlug"`
	Timestamp           *time.Time `json:"timestamp,omitempty"`
	Token               string     `json:"token"`
	Version             *string    `json:"version,omitempty"`
}

// PaymentCheckResponseDto defines model for PaymentCheckResponseDto.
type PaymentCheckResponseDto struct {
	CorrelationId *string             `json:"correlationId"`
	Details       *interface{}        `json:"details,omitempty"`
	ErrorCode     *string             `json:"errorCode"`
	Message       *string             `json:"message"`
	OrderId       *string             `json:"orderId"`
	Payments      *[]PaymentStatusDto `json:"payments,omitempty"`
	Success       *bool               `json:"success,omitempty"`
	Timestamp     *time.Time          `json:"timestamp,omitempty"`
	TotalCount    *int32              `json:"totalCount,omitempty"`
	Version       *string             `json:"version,omitempty"`
}

// PaymentConfirmRequestDto defines model for PaymentConfirmRequestDto.
type PaymentConfirmRequestDto struct {
	Amount        *float64           `json:"amount"`
	CorrelationId *string            `json:"correlationId"`
	Data          *map[string]string `json:"data"`
	Description   *string            `json:"description"`
	Items         *[]ConfirmItemDto  `json:"items"`
	PaymentId     string             `json:"paymentId"`
	Receipt       *ConfirmReceiptDto `json:"receipt"`
	TeamSlug      string             `json:"teamSlug"`
	Timestamp     *time.Time         `json:"timestamp,omitempty"`
	Token         string             `json:"token"`
	Version       *string            `json:"version,omitempty"`
}

// PaymentConfirmResponseDto defines model for PaymentConfirmResponseDto.
type PaymentConfirmResponseDto struct {
	AuthorizedAmount *float64                   `json:"authorizedAmount"`
	BankDetails      *BankTransactionDetailsDto `json:"bankDetails"`
	ConfirmedAmount  *float64                   `json:"confirmedAmount"`
	ConfirmedAt      *time.Time                 `json:"confirmedAt"`
	CorrelationId    *string                    `json:"correlationId"`
	Currency         *string                    `json:"currency"`
	Details          *ConfirmationDetailsDto    `json:"details"`
	ErrorCode        *string                    `json:"errorCode"`
	Fees             *FeeDetailsDto             `json:"fees"`
	Message          *string                    `json:"message"`
	OrderId          *string                    `json:"orderId"`
	PaymentId        *string                    `json:"paymentId"`
	RemainingAmount  *float64                   `json:"remainingAmount"`
	Settlement       *SettlementDetailsDto      `json:"settlement"`
	Status           *string                    `json:"status"`
	Success          *bool                      `json:"success,omitempty"`
	Timestamp        *time.Time                 `json:"timestamp,omitempty"`
	Version          *string                    `json:"version,omitempty"`
}

// PaymentDetailsDto defines model for PaymentDetailsDto.
type PaymentDetailsDto struct {
	Data            *map[string]string `json:"data"`
	Description     *string            `json:"description"`
	FailURL         *string            `json:"failURL"`
	Items           *[]OrderItemDto    `json:"items"`
	Language        *string            `json:"language"`
	NotificationURL *string            `json:"notificationURL"`
	PayType         *string            `json:"payType"`
	RedirectMethod  *string            `json:"redirectMethod"`
	SuccessURL      *string            `json:"successURL"`
}

// PaymentInitRequestDto defines model for PaymentInitRequestDto.
type PaymentInitRequestDto struct {
	Amount          float64            `json:"amount"`
	CorrelationId   *string            `json:"correlationId"`
	Currency        *string            `json:"currency,omitempty"`
	CustomerKey     *string            `json:"customerKey"`
	Data            *map[string]string `json:"data"`
	Description     *string            `json:"description"`
	Descriptor      *string            `json:"descriptor"`
	Email           *string            `json:"email"`
	FailURL         *string            `json:"failURL"`
	Items           *[]OrderItemDto    `json:"items"`
	Language        *string            `json:"language,omitempty"`
	NotificationURL *string            `json:"notificationURL"`
	OrderId         string             `json:"orderId"`
	PayType         *string            `json:"payType"`
	PaymentExpiry   *int32             `json:"paymentExpiry,omitempty"`
	Phone           *string            `json:"phone"`
	Receipt         *ReceiptDto        `json:"receipt"`
	RedirectMethod  *string            `json:"redirectMethod,omitempty"`
	SuccessURL      *string            `json:"successURL"`
	TeamSlug        string             `json:"teamSlug"`
	Timestamp       *time.Time         `json:"timestamp,omitempty"`
	Token           string             `json:"token"`
	Version         *string            `json:"version,omitempty"`
}

// PaymentInitResponseDto defines model for PaymentInitResponseDto.
type PaymentInitResponseDto struct {
	Amount        *float64              `json:"amount"`
	CorrelationId *string               `json:"correlationId"`
	CreatedAt     *time.Time            `json:"createdAt"`
	Currency      *string               `json:"currency"`
	Customer      *CustomerInfoDto      `json:"customer"`
	Details       *PaymentDetailsDto    `json:"details"`
	ErrorCode     *string               `json:"errorCode"`
	ExpiresAt     *time.Time            `json:"expiresAt"`
	Message       *string               `json:"message"`
	OrderId       *string               `json:"orderId"`
	PaymentId     *string               `json:"paymentId"`
	PaymentMethod *PaymentMethodInfoDto `json:"paymentMethod"`
	PaymentURL    *string               `json:"paymentURL"`
	Status        *string               `json:"status"`
	Success       *bool                 `json:"success,omitempty"`
	Timestamp     *time.Time            `json:"timestamp,omitempty"`
	Version       *string               `json:"version,omitempty"`
}

// PaymentMethodInfoDto defines model for PaymentMethodInfoDto.
type PaymentMethodInfoDto struct {
	AvailableMethods *[]string       `json:"availableMethods"`
	DefaultMethod    *string         `json:"defaultMethod"`
	SavedCards       *[]SavedCardDto `json:"savedCards"`
	Type             *string         `json:"type"`
}

// PaymentMetricsResponse defines model for PaymentMetricsResponse.
type PaymentMetricsResponse struct {
	PaymentMetrics *map[string]interface{} `json:"paymentMetrics,omitempty"`
	Timestamp      *time.Time              `json:"timestamp,omitempty"`
}

// PaymentStatusDto defines model for PaymentStatusDto.
type PaymentStatusDto struct {
	Amount            *float64               `json:"amount"`
	Amounts           *PaymentAmountsDto     `json:"amounts"`
	CardDetails       *CheckCardDetailsDto   `json:"cardDetails"`
	CreatedAt         *time.Time             `json:"createdAt"`
	Currency          *string                `json:"currency"`
	Customer          *CheckCustomerInfoDto  `json:"customer"`
	Data              *map[string]string     `json:"data"`
	Description       *string                `json:"description"`
	ExpiresAt         *time.Time             `json:"expiresAt"`
	OrderId           *string                `json:"orderId"`
	PayType           *string                `json:"payType"`
	PaymentId         *string                `json:"paymentId"`
	Receipt           *CheckReceiptDto       `json:"receipt"`
	Status            *string                `json:"status"`
	StatusDescription *string                `json:"statusDescription"`
	Transactions      *[]CheckTransactionDto `json:"transactions"`
	UpdatedAt         *time.Time             `json:"updatedAt"`
	Urls              *PaymentUrlsDto        `json:"urls"`
}

// PaymentUrlsDto defines model for PaymentUrlsDto.
type PaymentUrlsDto struct {
	FailURL         *string `json:"failURL"`
	NotificationURL *string `json:"notificationURL"`
	PaymentURL      *string `json:"paymentURL"`
	SuccessURL      *string `json:"successURL"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	Detail   *string `json:"detail"`
	Instance *string `json:"instance"`
	Status   *int32  `json:"status"`
	Title    *string `json:"title"`
	Type     *string `json:"type"`
}

// ReceiptDto defines model for ReceiptDto.
type ReceiptDto struct {
	ReceiptFFD105 *interface{} `json:"Receipt_FFD_105,omitempty"`
	ReceiptFFD12  *interface{} `json:"Receipt_FFD_12,omitempty"`
	Email         *string      `json:"email"`
	Phone         *string      `json:"phone"`
	Taxation      *string      `json:"taxation"`
}

// RefundCardInfoDto defines model for RefundCardInfoDto.
type RefundCardInfoDto struct {
	CardMask    *string `json:"cardMask"`
	CardType    *string `json:"cardType"`
	IssuingBank *string `json:"issuingBank"`
}

// RefundDetailsDto defines model for RefundDetailsDto.
type RefundDetailsDto struct {
	CardInfo               *RefundCardInfoDto `json:"cardInfo"`
	ExpectedProcessingTime *string            `json:"expectedProcessingTime"`
	RefundId               *string            `json:"refundId"`
	RefundMethod           *string            `json:"refundMethod"`
	RefundStatus           *string            `json:"refundStatus"`
}

// ResetMetricsRequest defines model for ResetMetricsRequest.
type ResetMetricsRequest struct {
	Categories *[]string `json:"categories,omitempty"`
}

// SavedCardDto defines model for SavedCardDto.
type SavedCardDto struct {
	CardId     *string `json:"cardId"`
	CardMask   *string `json:"cardMask"`
	CardType   *string `json:"cardType"`
	ExpiryDate *string `json:"expiryDate"`
	IsDefault  *bool   `json:"isDefault,omitempty"`
}

// SettlementDetailsDto defines model for SettlementDetailsDto.
type SettlementDetailsDto struct {
	ExchangeRate       *float64   `json:"exchangeRate"`
	SettlementAmount   *float64   `json:"settlementAmount"`
	SettlementCurrency *string    `json:"settlementCurrency"`
	SettlementDate     *time.Time `json:"settlementDate"`
}

// SystemMetricsResponse defines model for SystemMetricsResponse.
type SystemMetricsResponse struct {
	ApiMetrics         *map[string]interface{} `json:"apiMetrics,omitempty"`
	DatabaseMetrics    *map[string]interface{} `json:"databaseMetrics,omitempty"`
	HealthCheckMetrics *map[string]interface{} `json:"healthCheckMetrics,omitempty"`
	Timestamp          *time.Time              `json:"timestamp,omitempty"`
}

// TeamRegistrationDetailsDto defines model for TeamRegistrationDetailsDto.
type TeamRegistrationDetailsDto struct {
	Email               *string   `json:"email"`
	FailURL             *string   `json:"failURL"`
	NextSteps           *[]string `json:"nextSteps"`
	NotificationURL     *string   `json:"notificationURL"`
	Phone               *string   `json:"phone"`
	SuccessURL          *string   `json:"successURL"`
	SupportedCurrencies *[]string `json:"supportedCurrencies"`
	TeamName            *string   `json:"teamName"`
}

// TeamRegistrationRequestDto defines model for TeamRegistrationRequestDto.
type TeamRegistrationRequestDto struct {
	AcceptTerms         *bool              `json:"acceptTerms,omitempty"`
	BusinessInfo        *map[string]string `json:"businessInfo"`
	Email               string             `json:"email"`
	FailURL             string             `json:"failURL"`
	NotificationURL     *string            `json:"notificationURL"`
	Password            string             `json:"password"`
	Phone               *string            `json:"phone"`
	SuccessURL          string             `json:"successURL"`
	SupportedCurrencies string             `json:"supportedCurrencies"`
	TeamName            string             `json:"teamName"`
	TeamSlug            string             `json:"teamSlug"`
}

// TeamRegistrationResponseDto defines model for TeamRegistrationResponseDto.
type TeamRegistrationResponseDto struct {
	ApiEndpoint         *string                     `json:"apiEndpoint"`
	CreatedAt           *time.Time                  `json:"createdAt"`
	Details             *TeamRegistrationDetailsDto `json:"details"`
	ErrorCode           *string                     `json:"errorCode"`
	Message             *string                     `json:"message,omitempty"`
	PasswordHashFull    *string                     `json:"passwordHashFull"`
	PasswordHashPreview *string                     `json:"passwordHashPreview"`
	Status              *string                     `json:"status"`
	Success             *bool                       `json:"success,omitempty"`
	TeamId              *openapi_types.UUID         `json:"teamId"`
	TeamSlug            *string                     `json:"teamSlug"`
}

// GetApiV1PaymentCheckStatusParams defines parameters for GetApiV1PaymentCheckStatus.
type GetApiV1PaymentCheckStatusParams struct {
	PaymentId *string `form:"paymentId,omitempty" json:"paymentId,omitempty"`
	OrderId   *string `form:"orderId,omitempty" json:"orderId,omitempty"`
	TeamSlug  *string `form:"teamSlug,omitempty" json:"teamSlug,omitempty"`
	Token     *string `form:"token,omitempty" json:"token,omitempty"`
	Language  *string `form:"language,omitempty" json:"language,omitempty"`
}

// GetApiV1PaymentFormRenderPaymentIdParams defines parameters for GetApiV1PaymentFormRenderPaymentId.
type GetApiV1PaymentFormRenderPaymentIdParams struct {
	Lang *string `form:"lang,omitempty" json:"lang,omitempty"`
}

// GetApiV1PaymentFormResultPaymentIdParams defines parameters for GetApiV1PaymentFormResultPaymentId.
type GetApiV1PaymentFormResultPaymentIdParams struct {
	Success *bool   `form:"success,omitempty" json:"success,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty"`
}

// PostApiV1PaymentFormSubmitFormdataBody defines parameters for PostApiV1PaymentFormSubmit.
type PostApiV1PaymentFormSubmitFormdataBody struct {
	CardNumber     *string `form:"CardNumber,omitempty" json:"CardNumber,omitempty"`
	CardholderName *string `form:"CardholderName,omitempty" json:"CardholderName,omitempty"`
	CsrfToken      *string `form:"CsrfToken,omitempty" json:"CsrfToken,omitempty"`
	Cvv            *string `form:"Cvv,omitempty" json:"Cvv,omitempty"`
	Email          *string `form:"Email,omitempty" json:"Email,omitempty"`
	ExpiryDate     *string `form:"ExpiryDate,omitempty" json:"ExpiryDate,omitempty"`
	PaymentId      *string `form:"PaymentId,omitempty" json:"PaymentId,omitempty"`
	Phone          *string `form:"Phone,omitempty" json:"Phone,omitempty"`
	SaveCard       *bool   `form:"SaveCard,omitempty" json:"SaveCard,omitempty"`
	TermsAgreement *bool   `form:"TermsAgreement,omitempty" json:"TermsAgreement,omitempty"`
}

// PostApiMetricsResetApplicationWildcardPlusJSONRequestBody defines body for PostApiMetricsReset for application/*+json ContentType.
type PostApiMetricsResetApplicationWildcardPlusJSONRequestBody = ResetMetricsRequest

// PostApiMetricsResetJSONRequestBody defines body for PostApiMetricsReset for application/json ContentType.
type PostApiMetricsResetJSONRequestBody = ResetMetricsRequest

// PostApiV1PaymentCancelCancelApplicationWildcardPlusJSONRequestBody defines body for PostApiV1PaymentCancelCancel for application/*+json ContentType.
type PostApiV1PaymentCancelCancelApplicationWildcardPlusJSONRequestBody = PaymentCancelRequestDto

// PostApiV1PaymentCancelCancelJSONRequestBody defines body for PostApiV1PaymentCancelCancel for application/json ContentType.
type PostApiV1PaymentCancelCancelJSONRequestBody = PaymentCancelRequestDto

// PostApiV1PaymentCheckCheckApplicationWildcardPlusJSONRequestBody defines body for PostApiV1PaymentCheckCheck for application/*+json ContentType.
type PostApiV1PaymentCheckCheckApplicationWildcardPlusJSONRequestBody = PaymentCheckRequestDto

// PostApiV1PaymentCheckCheckJSONRequestBody defines body for PostApiV1PaymentCheckCheck for application/json ContentType.
type PostApiV1PaymentCheckCheckJSONRequestBody = PaymentCheckRequestDto

// PostApiV1PaymentConfirmConfirmApplicationWildcardPlusJSONRequestBody defines body for PostApiV1PaymentConfirmConfirm for application/*+json ContentType.
type PostApiV1PaymentConfirmConfirmApplicationWildcardPlusJSONRequestBody = PaymentConfirmRequestDto

// PostApiV1PaymentConfirmConfirmJSONRequestBody defines body for PostApiV1PaymentConfirmConfirm for application/json ContentType.
type PostApiV1PaymentConfirmConfirmJSONRequestBody = PaymentConfirmRequestDto

// PostApiV1PaymentFormSubmitFormdataRequestBody defines body for PostApiV1PaymentFormSubmit for application/x-www-form-urlencoded ContentType.
type PostApiV1PaymentFormSubmitFormdataRequestBody PostApiV1PaymentFormSubmitFormdataBody

// PostApiV1PaymentInitInitApplicationWildcardPlusJSONRequestBody defines body for PostApiV1PaymentInitInit for application/*+json ContentType.
type PostApiV1PaymentInitInitApplicationWildcardPlusJSONRequestBody = PaymentInitRequestDto

// PostApiV1PaymentInitInitJSONRequestBody defines body for PostApiV1PaymentInitInit for application/json ContentType.
type PostApiV1PaymentInitInitJSONRequestBody = PaymentInitRequestDto

// PostApiV1TeamRegistrationRegisterApplicationWildcardPlusJSONRequestBody defines body for PostApiV1TeamRegistrationRegister for application/*+json ContentType.
type PostApiV1TeamRegistrationRegisterApplicationWildcardPlusJSONRequestBody = TeamRegistrationRequestDto

// PostApiV1TeamRegistrationRegisterJSONRequestBody defines body for PostApiV1TeamRegistrationRegister for application/json ContentType.
type PostApiV1TeamRegistrationRegisterJSONRequestBody = TeamRegistrationRequestDto

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiMetricsDashboard request
	GetApiMetricsDashboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMetricsPayments request
	GetApiMetricsPayments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiMetricsResetWithBody request with any body
	PostApiMetricsResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiMetricsResetWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiMetricsResetApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiMetricsReset(ctx context.Context, body PostApiMetricsResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMetricsSummary request
	GetApiMetricsSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiMetricsSystem request
	GetApiMetricsSystem(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1AdminClearDatabase request
	PostApiV1AdminClearDatabase(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AdminStatus request
	GetApiV1AdminStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PaymentCancelCancelWithBody request with any body
	PostApiV1PaymentCancelCancelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PaymentCancelCancelWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV1PaymentCancelCancelApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PaymentCancelCancel(ctx context.Context, body PostApiV1PaymentCancelCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PaymentCheckCheckWithBody request with any body
	PostApiV1PaymentCheckCheckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PaymentCheckCheckWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV1PaymentCheckCheckApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PaymentCheckCheck(ctx context.Context, body PostApiV1PaymentCheckCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PaymentCheckStatus request
	GetApiV1PaymentCheckStatus(ctx context.Context, params *GetApiV1PaymentCheckStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PaymentConfirmConfirmWithBody request with any body
	PostApiV1PaymentConfirmConfirmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PaymentConfirmConfirmWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV1PaymentConfirmConfirmApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PaymentConfirmConfirm(ctx context.Context, body PostApiV1PaymentConfirmConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PaymentFormRenderPaymentId request
	GetApiV1PaymentFormRenderPaymentId(ctx context.Context, paymentId string, params *GetApiV1PaymentFormRenderPaymentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PaymentFormResultPaymentId request
	GetApiV1PaymentFormResultPaymentId(ctx context.Context, paymentId string, params *GetApiV1PaymentFormResultPaymentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PaymentFormSubmitWithBody request with any body
	PostApiV1PaymentFormSubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PaymentFormSubmitWithFormdataBody(ctx context.Context, body PostApiV1PaymentFormSubmitFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PaymentInitInitWithBody request with any body
	PostApiV1PaymentInitInitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PaymentInitInitWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV1PaymentInitInitApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PaymentInitInit(ctx context.Context, body PostApiV1PaymentInitInitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PaymentInitMetricsTeamSlug request
	GetApiV1PaymentInitMetricsTeamSlug(ctx context.Context, teamSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PaymentInitSessionPaymentId request
	GetApiV1PaymentInitSessionPaymentId(ctx context.Context, paymentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1TeamRegistrationCheckAvailabilityTeamSlug request
	GetApiV1TeamRegistrationCheckAvailabilityTeamSlug(ctx context.Context, teamSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1TeamRegistrationRegisterWithBody request with any body
	PostApiV1TeamRegistrationRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1TeamRegistrationRegisterWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV1TeamRegistrationRegisterApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1TeamRegistrationRegister(ctx context.Context, body PostApiV1TeamRegistrationRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1TeamRegistrationStatusTeamSlug request
	GetApiV1TeamRegistrationStatusTeamSlug(ctx context.Context, teamSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiMetricsDashboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMetricsDashboardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMetricsPayments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMetricsPaymentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMetricsResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMetricsResetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMetricsResetWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiMetricsResetApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMetricsResetRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiMetricsReset(ctx context.Context, body PostApiMetricsResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiMetricsResetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMetricsSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMetricsSummaryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiMetricsSystem(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiMetricsSystemRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1AdminClearDatabase(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1AdminClearDatabaseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AdminStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AdminStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentCancelCancelWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentCancelCancelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentCancelCancelWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV1PaymentCancelCancelApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentCancelCancelRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentCancelCancel(ctx context.Context, body PostApiV1PaymentCancelCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentCancelCancelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentCheckCheckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentCheckCheckRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentCheckCheckWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV1PaymentCheckCheckApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentCheckCheckRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentCheckCheck(ctx context.Context, body PostApiV1PaymentCheckCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentCheckCheckRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PaymentCheckStatus(ctx context.Context, params *GetApiV1PaymentCheckStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PaymentCheckStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentConfirmConfirmWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentConfirmConfirmRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentConfirmConfirmWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV1PaymentConfirmConfirmApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentConfirmConfirmRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentConfirmConfirm(ctx context.Context, body PostApiV1PaymentConfirmConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentConfirmConfirmRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PaymentFormRenderPaymentId(ctx context.Context, paymentId string, params *GetApiV1PaymentFormRenderPaymentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PaymentFormRenderPaymentIdRequest(c.Server, paymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PaymentFormResultPaymentId(ctx context.Context, paymentId string, params *GetApiV1PaymentFormResultPaymentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PaymentFormResultPaymentIdRequest(c.Server, paymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentFormSubmitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentFormSubmitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentFormSubmitWithFormdataBody(ctx context.Context, body PostApiV1PaymentFormSubmitFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentFormSubmitRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentInitInitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentInitInitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentInitInitWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV1PaymentInitInitApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentInitInitRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PaymentInitInit(ctx context.Context, body PostApiV1PaymentInitInitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PaymentInitInitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PaymentInitMetricsTeamSlug(ctx context.Context, teamSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PaymentInitMetricsTeamSlugRequest(c.Server, teamSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PaymentInitSessionPaymentId(ctx context.Context, paymentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PaymentInitSessionPaymentIdRequest(c.Server, paymentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1TeamRegistrationCheckAvailabilityTeamSlug(ctx context.Context, teamSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1TeamRegistrationCheckAvailabilityTeamSlugRequest(c.Server, teamSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1TeamRegistrationRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1TeamRegistrationRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1TeamRegistrationRegisterWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiV1TeamRegistrationRegisterApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1TeamRegistrationRegisterRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1TeamRegistrationRegister(ctx context.Context, body PostApiV1TeamRegistrationRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1TeamRegistrationRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1TeamRegistrationStatusTeamSlug(ctx context.Context, teamSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1TeamRegistrationStatusTeamSlugRequest(c.Server, teamSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiMetricsDashboardRequest generates requests for GetApiMetricsDashboard
func NewGetApiMetricsDashboardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Metrics/dashboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiMetricsPaymentsRequest generates requests for GetApiMetricsPayments
func NewGetApiMetricsPaymentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Metrics/payments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiMetricsResetRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiMetricsReset builder with application/*+json body
func NewPostApiMetricsResetRequestWithApplicationWildcardPlusJSONBody(server string, body PostApiMetricsResetApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiMetricsResetRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApiMetricsResetRequest calls the generic PostApiMetricsReset builder with application/json body
func NewPostApiMetricsResetRequest(server string, body PostApiMetricsResetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiMetricsResetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiMetricsResetRequestWithBody generates requests for PostApiMetricsReset with any type of body
func NewPostApiMetricsResetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Metrics/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiMetricsSummaryRequest generates requests for GetApiMetricsSummary
func NewGetApiMetricsSummaryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Metrics/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiMetricsSystemRequest generates requests for GetApiMetricsSystem
func NewGetApiMetricsSystemRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Metrics/system")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1AdminClearDatabaseRequest generates requests for PostApiV1AdminClearDatabase
func NewPostApiV1AdminClearDatabaseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Admin/clear-database")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AdminStatusRequest generates requests for GetApiV1AdminStatus
func NewGetApiV1AdminStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/Admin/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PaymentCancelCancelRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiV1PaymentCancelCancel builder with application/*+json body
func NewPostApiV1PaymentCancelCancelRequestWithApplicationWildcardPlusJSONBody(server string, body PostApiV1PaymentCancelCancelApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PaymentCancelCancelRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApiV1PaymentCancelCancelRequest calls the generic PostApiV1PaymentCancelCancel builder with application/json body
func NewPostApiV1PaymentCancelCancelRequest(server string, body PostApiV1PaymentCancelCancelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PaymentCancelCancelRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PaymentCancelCancelRequestWithBody generates requests for PostApiV1PaymentCancelCancel with any type of body
func NewPostApiV1PaymentCancelCancelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/PaymentCancel/cancel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PaymentCheckCheckRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiV1PaymentCheckCheck builder with application/*+json body
func NewPostApiV1PaymentCheckCheckRequestWithApplicationWildcardPlusJSONBody(server string, body PostApiV1PaymentCheckCheckApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PaymentCheckCheckRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApiV1PaymentCheckCheckRequest calls the generic PostApiV1PaymentCheckCheck builder with application/json body
func NewPostApiV1PaymentCheckCheckRequest(server string, body PostApiV1PaymentCheckCheckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PaymentCheckCheckRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PaymentCheckCheckRequestWithBody generates requests for PostApiV1PaymentCheckCheck with any type of body
func NewPostApiV1PaymentCheckCheckRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/PaymentCheck/check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1PaymentCheckStatusRequest generates requests for GetApiV1PaymentCheckStatus
func NewGetApiV1PaymentCheckStatusRequest(server string, params *GetApiV1PaymentCheckStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/PaymentCheck/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PaymentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "paymentId", runtime.ParamLocationQuery, *params.PaymentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderId", runtime.ParamLocationQuery, *params.OrderId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TeamSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "teamSlug", runtime.ParamLocationQuery, *params.TeamSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Token != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Language != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PaymentConfirmConfirmRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiV1PaymentConfirmConfirm builder with application/*+json body
func NewPostApiV1PaymentConfirmConfirmRequestWithApplicationWildcardPlusJSONBody(server string, body PostApiV1PaymentConfirmConfirmApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PaymentConfirmConfirmRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApiV1PaymentConfirmConfirmRequest calls the generic PostApiV1PaymentConfirmConfirm builder with application/json body
func NewPostApiV1PaymentConfirmConfirmRequest(server string, body PostApiV1PaymentConfirmConfirmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PaymentConfirmConfirmRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PaymentConfirmConfirmRequestWithBody generates requests for PostApiV1PaymentConfirmConfirm with any type of body
func NewPostApiV1PaymentConfirmConfirmRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/PaymentConfirm/confirm")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1PaymentFormRenderPaymentIdRequest generates requests for GetApiV1PaymentFormRenderPaymentId
func NewGetApiV1PaymentFormRenderPaymentIdRequest(server string, paymentId string, params *GetApiV1PaymentFormRenderPaymentIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/PaymentForm/render/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Lang != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lang", runtime.ParamLocationQuery, *params.Lang); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PaymentFormResultPaymentIdRequest generates requests for GetApiV1PaymentFormResultPaymentId
func NewGetApiV1PaymentFormResultPaymentIdRequest(server string, paymentId string, params *GetApiV1PaymentFormResultPaymentIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/PaymentForm/result/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Success != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "success", runtime.ParamLocationQuery, *params.Success); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Message != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message", runtime.ParamLocationQuery, *params.Message); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PaymentFormSubmitRequestWithFormdataBody calls the generic PostApiV1PaymentFormSubmit builder with application/x-www-form-urlencoded body
func NewPostApiV1PaymentFormSubmitRequestWithFormdataBody(server string, body PostApiV1PaymentFormSubmitFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostApiV1PaymentFormSubmitRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostApiV1PaymentFormSubmitRequestWithBody generates requests for PostApiV1PaymentFormSubmit with any type of body
func NewPostApiV1PaymentFormSubmitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/PaymentForm/submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1PaymentInitInitRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiV1PaymentInitInit builder with application/*+json body
func NewPostApiV1PaymentInitInitRequestWithApplicationWildcardPlusJSONBody(server string, body PostApiV1PaymentInitInitApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PaymentInitInitRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApiV1PaymentInitInitRequest calls the generic PostApiV1PaymentInitInit builder with application/json body
func NewPostApiV1PaymentInitInitRequest(server string, body PostApiV1PaymentInitInitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PaymentInitInitRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PaymentInitInitRequestWithBody generates requests for PostApiV1PaymentInitInit with any type of body
func NewPostApiV1PaymentInitInitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/PaymentInit/init")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1PaymentInitMetricsTeamSlugRequest generates requests for GetApiV1PaymentInitMetricsTeamSlug
func NewGetApiV1PaymentInitMetricsTeamSlugRequest(server string, teamSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamSlug", runtime.ParamLocationPath, teamSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/PaymentInit/metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PaymentInitSessionPaymentIdRequest generates requests for GetApiV1PaymentInitSessionPaymentId
func NewGetApiV1PaymentInitSessionPaymentIdRequest(server string, paymentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/PaymentInit/session/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1TeamRegistrationCheckAvailabilityTeamSlugRequest generates requests for GetApiV1TeamRegistrationCheckAvailabilityTeamSlug
func NewGetApiV1TeamRegistrationCheckAvailabilityTeamSlugRequest(server string, teamSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamSlug", runtime.ParamLocationPath, teamSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/TeamRegistration/check-availability/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1TeamRegistrationRegisterRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiV1TeamRegistrationRegister builder with application/*+json body
func NewPostApiV1TeamRegistrationRegisterRequestWithApplicationWildcardPlusJSONBody(server string, body PostApiV1TeamRegistrationRegisterApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1TeamRegistrationRegisterRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApiV1TeamRegistrationRegisterRequest calls the generic PostApiV1TeamRegistrationRegister builder with application/json body
func NewPostApiV1TeamRegistrationRegisterRequest(server string, body PostApiV1TeamRegistrationRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1TeamRegistrationRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1TeamRegistrationRegisterRequestWithBody generates requests for PostApiV1TeamRegistrationRegister with any type of body
func NewPostApiV1TeamRegistrationRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/TeamRegistration/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1TeamRegistrationStatusTeamSlugRequest generates requests for GetApiV1TeamRegistrationStatusTeamSlug
func NewGetApiV1TeamRegistrationStatusTeamSlugRequest(server string, teamSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamSlug", runtime.ParamLocationPath, teamSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/TeamRegistration/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiMetricsDashboardWithResponse request
	GetApiMetricsDashboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMetricsDashboardResponse, error)

	// GetApiMetricsPaymentsWithResponse request
	GetApiMetricsPaymentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMetricsPaymentsResponse, error)

	// PostApiMetricsResetWithBodyWithResponse request with any body
	PostApiMetricsResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiMetricsResetResponse, error)

	PostApiMetricsResetWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiMetricsResetApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMetricsResetResponse, error)

	PostApiMetricsResetWithResponse(ctx context.Context, body PostApiMetricsResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMetricsResetResponse, error)

	// GetApiMetricsSummaryWithResponse request
	GetApiMetricsSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMetricsSummaryResponse, error)

	// GetApiMetricsSystemWithResponse request
	GetApiMetricsSystemWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMetricsSystemResponse, error)

	// PostApiV1AdminClearDatabaseWithResponse request
	PostApiV1AdminClearDatabaseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1AdminClearDatabaseResponse, error)

	// GetApiV1AdminStatusWithResponse request
	GetApiV1AdminStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AdminStatusResponse, error)

	// PostApiV1PaymentCancelCancelWithBodyWithResponse request with any body
	PostApiV1PaymentCancelCancelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PaymentCancelCancelResponse, error)

	PostApiV1PaymentCancelCancelWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV1PaymentCancelCancelApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentCancelCancelResponse, error)

	PostApiV1PaymentCancelCancelWithResponse(ctx context.Context, body PostApiV1PaymentCancelCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentCancelCancelResponse, error)

	// PostApiV1PaymentCheckCheckWithBodyWithResponse request with any body
	PostApiV1PaymentCheckCheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PaymentCheckCheckResponse, error)

	PostApiV1PaymentCheckCheckWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV1PaymentCheckCheckApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentCheckCheckResponse, error)

	PostApiV1PaymentCheckCheckWithResponse(ctx context.Context, body PostApiV1PaymentCheckCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentCheckCheckResponse, error)

	// GetApiV1PaymentCheckStatusWithResponse request
	GetApiV1PaymentCheckStatusWithResponse(ctx context.Context, params *GetApiV1PaymentCheckStatusParams, reqEditors ...RequestEditorFn) (*GetApiV1PaymentCheckStatusResponse, error)

	// PostApiV1PaymentConfirmConfirmWithBodyWithResponse request with any body
	PostApiV1PaymentConfirmConfirmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PaymentConfirmConfirmResponse, error)

	PostApiV1PaymentConfirmConfirmWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV1PaymentConfirmConfirmApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentConfirmConfirmResponse, error)

	PostApiV1PaymentConfirmConfirmWithResponse(ctx context.Context, body PostApiV1PaymentConfirmConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentConfirmConfirmResponse, error)

	// GetApiV1PaymentFormRenderPaymentIdWithResponse request
	GetApiV1PaymentFormRenderPaymentIdWithResponse(ctx context.Context, paymentId string, params *GetApiV1PaymentFormRenderPaymentIdParams, reqEditors ...RequestEditorFn) (*GetApiV1PaymentFormRenderPaymentIdResponse, error)

	// GetApiV1PaymentFormResultPaymentIdWithResponse request
	GetApiV1PaymentFormResultPaymentIdWithResponse(ctx context.Context, paymentId string, params *GetApiV1PaymentFormResultPaymentIdParams, reqEditors ...RequestEditorFn) (*GetApiV1PaymentFormResultPaymentIdResponse, error)

	// PostApiV1PaymentFormSubmitWithBodyWithResponse request with any body
	PostApiV1PaymentFormSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PaymentFormSubmitResponse, error)

	PostApiV1PaymentFormSubmitWithFormdataBodyWithResponse(ctx context.Context, body PostApiV1PaymentFormSubmitFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentFormSubmitResponse, error)

	// PostApiV1PaymentInitInitWithBodyWithResponse request with any body
	PostApiV1PaymentInitInitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PaymentInitInitResponse, error)

	PostApiV1PaymentInitInitWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV1PaymentInitInitApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentInitInitResponse, error)

	PostApiV1PaymentInitInitWithResponse(ctx context.Context, body PostApiV1PaymentInitInitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentInitInitResponse, error)

	// GetApiV1PaymentInitMetricsTeamSlugWithResponse request
	GetApiV1PaymentInitMetricsTeamSlugWithResponse(ctx context.Context, teamSlug string, reqEditors ...RequestEditorFn) (*GetApiV1PaymentInitMetricsTeamSlugResponse, error)

	// GetApiV1PaymentInitSessionPaymentIdWithResponse request
	GetApiV1PaymentInitSessionPaymentIdWithResponse(ctx context.Context, paymentId string, reqEditors ...RequestEditorFn) (*GetApiV1PaymentInitSessionPaymentIdResponse, error)

	// GetApiV1TeamRegistrationCheckAvailabilityTeamSlugWithResponse request
	GetApiV1TeamRegistrationCheckAvailabilityTeamSlugWithResponse(ctx context.Context, teamSlug string, reqEditors ...RequestEditorFn) (*GetApiV1TeamRegistrationCheckAvailabilityTeamSlugResponse, error)

	// PostApiV1TeamRegistrationRegisterWithBodyWithResponse request with any body
	PostApiV1TeamRegistrationRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1TeamRegistrationRegisterResponse, error)

	PostApiV1TeamRegistrationRegisterWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV1TeamRegistrationRegisterApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1TeamRegistrationRegisterResponse, error)

	PostApiV1TeamRegistrationRegisterWithResponse(ctx context.Context, body PostApiV1TeamRegistrationRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1TeamRegistrationRegisterResponse, error)

	// GetApiV1TeamRegistrationStatusTeamSlugWithResponse request
	GetApiV1TeamRegistrationStatusTeamSlugWithResponse(ctx context.Context, teamSlug string, reqEditors ...RequestEditorFn) (*GetApiV1TeamRegistrationStatusTeamSlugResponse, error)
}

type GetApiMetricsDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiMetricsDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMetricsDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMetricsPaymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentMetricsResponse
}

// Status returns HTTPResponse.Status
func (r GetApiMetricsPaymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMetricsPaymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiMetricsResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiMetricsResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiMetricsResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMetricsSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetricsSummaryResponse
}

// Status returns HTTPResponse.Status
func (r GetApiMetricsSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMetricsSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiMetricsSystemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemMetricsResponse
}

// Status returns HTTPResponse.Status
func (r GetApiMetricsSystemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiMetricsSystemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1AdminClearDatabaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminDataClearResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1AdminClearDatabaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1AdminClearDatabaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AdminStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminStatusResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AdminStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AdminStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PaymentCancelCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentCancelResponseDto
	JSON400      *PaymentCancelResponseDto
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *PaymentCancelResponseDto
	JSON409      *PaymentCancelResponseDto
	JSON422      *PaymentCancelResponseDto
	JSON429      *ProblemDetails
	JSON500      *PaymentCancelResponseDto
}

// Status returns HTTPResponse.Status
func (r PostApiV1PaymentCancelCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PaymentCancelCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PaymentCheckCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentCheckResponseDto
	JSON400      *PaymentCheckResponseDto
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *PaymentCheckResponseDto
	JSON429      *ProblemDetails
	JSON500      *PaymentCheckResponseDto
}

// Status returns HTTPResponse.Status
func (r PostApiV1PaymentCheckCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PaymentCheckCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PaymentCheckStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentCheckResponseDto
	JSON400      *PaymentCheckResponseDto
	JSON401      *ProblemDetails
	JSON404      *PaymentCheckResponseDto
}

// Status returns HTTPResponse.Status
func (r GetApiV1PaymentCheckStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PaymentCheckStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PaymentConfirmConfirmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentConfirmResponseDto
	JSON400      *PaymentConfirmResponseDto
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON404      *PaymentConfirmResponseDto
	JSON409      *PaymentConfirmResponseDto
	JSON429      *ProblemDetails
	JSON500      *PaymentConfirmResponseDto
}

// Status returns HTTPResponse.Status
func (r PostApiV1PaymentConfirmConfirmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PaymentConfirmConfirmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PaymentFormRenderPaymentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1PaymentFormRenderPaymentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PaymentFormRenderPaymentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PaymentFormResultPaymentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1PaymentFormResultPaymentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PaymentFormResultPaymentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PaymentFormSubmitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiV1PaymentFormSubmitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PaymentFormSubmitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PaymentInitInitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentInitResponseDto
	JSON400      *PaymentInitResponseDto
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
	JSON422      *PaymentInitResponseDto
	JSON429      *ProblemDetails
	JSON500      *PaymentInitResponseDto
}

// Status returns HTTPResponse.Status
func (r PostApiV1PaymentInitInitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PaymentInitInitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PaymentInitMetricsTeamSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ProblemDetails
	JSON403      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetApiV1PaymentInitMetricsTeamSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PaymentInitMetricsTeamSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PaymentInitSessionPaymentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetApiV1PaymentInitSessionPaymentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PaymentInitSessionPaymentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1TeamRegistrationCheckAvailabilityTeamSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetApiV1TeamRegistrationCheckAvailabilityTeamSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1TeamRegistrationCheckAvailabilityTeamSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1TeamRegistrationRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TeamRegistrationResponseDto
	JSON400      *TeamRegistrationResponseDto
	JSON409      *TeamRegistrationResponseDto
	JSON429      *ProblemDetails
	JSON500      *TeamRegistrationResponseDto
}

// Status returns HTTPResponse.Status
func (r PostApiV1TeamRegistrationRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1TeamRegistrationRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1TeamRegistrationStatusTeamSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetApiV1TeamRegistrationStatusTeamSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1TeamRegistrationStatusTeamSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiMetricsDashboardWithResponse request returning *GetApiMetricsDashboardResponse
func (c *ClientWithResponses) GetApiMetricsDashboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMetricsDashboardResponse, error) {
	rsp, err := c.GetApiMetricsDashboard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMetricsDashboardResponse(rsp)
}

// GetApiMetricsPaymentsWithResponse request returning *GetApiMetricsPaymentsResponse
func (c *ClientWithResponses) GetApiMetricsPaymentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMetricsPaymentsResponse, error) {
	rsp, err := c.GetApiMetricsPayments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMetricsPaymentsResponse(rsp)
}

// PostApiMetricsResetWithBodyWithResponse request with arbitrary body returning *PostApiMetricsResetResponse
func (c *ClientWithResponses) PostApiMetricsResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiMetricsResetResponse, error) {
	rsp, err := c.PostApiMetricsResetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMetricsResetResponse(rsp)
}

func (c *ClientWithResponses) PostApiMetricsResetWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiMetricsResetApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMetricsResetResponse, error) {
	rsp, err := c.PostApiMetricsResetWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMetricsResetResponse(rsp)
}

func (c *ClientWithResponses) PostApiMetricsResetWithResponse(ctx context.Context, body PostApiMetricsResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiMetricsResetResponse, error) {
	rsp, err := c.PostApiMetricsReset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiMetricsResetResponse(rsp)
}

// GetApiMetricsSummaryWithResponse request returning *GetApiMetricsSummaryResponse
func (c *ClientWithResponses) GetApiMetricsSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMetricsSummaryResponse, error) {
	rsp, err := c.GetApiMetricsSummary(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMetricsSummaryResponse(rsp)
}

// GetApiMetricsSystemWithResponse request returning *GetApiMetricsSystemResponse
func (c *ClientWithResponses) GetApiMetricsSystemWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiMetricsSystemResponse, error) {
	rsp, err := c.GetApiMetricsSystem(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiMetricsSystemResponse(rsp)
}

// PostApiV1AdminClearDatabaseWithResponse request returning *PostApiV1AdminClearDatabaseResponse
func (c *ClientWithResponses) PostApiV1AdminClearDatabaseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1AdminClearDatabaseResponse, error) {
	rsp, err := c.PostApiV1AdminClearDatabase(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1AdminClearDatabaseResponse(rsp)
}

// GetApiV1AdminStatusWithResponse request returning *GetApiV1AdminStatusResponse
func (c *ClientWithResponses) GetApiV1AdminStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AdminStatusResponse, error) {
	rsp, err := c.GetApiV1AdminStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AdminStatusResponse(rsp)
}

// PostApiV1PaymentCancelCancelWithBodyWithResponse request with arbitrary body returning *PostApiV1PaymentCancelCancelResponse
func (c *ClientWithResponses) PostApiV1PaymentCancelCancelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PaymentCancelCancelResponse, error) {
	rsp, err := c.PostApiV1PaymentCancelCancelWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentCancelCancelResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PaymentCancelCancelWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV1PaymentCancelCancelApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentCancelCancelResponse, error) {
	rsp, err := c.PostApiV1PaymentCancelCancelWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentCancelCancelResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PaymentCancelCancelWithResponse(ctx context.Context, body PostApiV1PaymentCancelCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentCancelCancelResponse, error) {
	rsp, err := c.PostApiV1PaymentCancelCancel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentCancelCancelResponse(rsp)
}

// PostApiV1PaymentCheckCheckWithBodyWithResponse request with arbitrary body returning *PostApiV1PaymentCheckCheckResponse
func (c *ClientWithResponses) PostApiV1PaymentCheckCheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PaymentCheckCheckResponse, error) {
	rsp, err := c.PostApiV1PaymentCheckCheckWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentCheckCheckResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PaymentCheckCheckWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV1PaymentCheckCheckApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentCheckCheckResponse, error) {
	rsp, err := c.PostApiV1PaymentCheckCheckWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentCheckCheckResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PaymentCheckCheckWithResponse(ctx context.Context, body PostApiV1PaymentCheckCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentCheckCheckResponse, error) {
	rsp, err := c.PostApiV1PaymentCheckCheck(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentCheckCheckResponse(rsp)
}

// GetApiV1PaymentCheckStatusWithResponse request returning *GetApiV1PaymentCheckStatusResponse
func (c *ClientWithResponses) GetApiV1PaymentCheckStatusWithResponse(ctx context.Context, params *GetApiV1PaymentCheckStatusParams, reqEditors ...RequestEditorFn) (*GetApiV1PaymentCheckStatusResponse, error) {
	rsp, err := c.GetApiV1PaymentCheckStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PaymentCheckStatusResponse(rsp)
}

// PostApiV1PaymentConfirmConfirmWithBodyWithResponse request with arbitrary body returning *PostApiV1PaymentConfirmConfirmResponse
func (c *ClientWithResponses) PostApiV1PaymentConfirmConfirmWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PaymentConfirmConfirmResponse, error) {
	rsp, err := c.PostApiV1PaymentConfirmConfirmWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentConfirmConfirmResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PaymentConfirmConfirmWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV1PaymentConfirmConfirmApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentConfirmConfirmResponse, error) {
	rsp, err := c.PostApiV1PaymentConfirmConfirmWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentConfirmConfirmResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PaymentConfirmConfirmWithResponse(ctx context.Context, body PostApiV1PaymentConfirmConfirmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentConfirmConfirmResponse, error) {
	rsp, err := c.PostApiV1PaymentConfirmConfirm(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentConfirmConfirmResponse(rsp)
}

// GetApiV1PaymentFormRenderPaymentIdWithResponse request returning *GetApiV1PaymentFormRenderPaymentIdResponse
func (c *ClientWithResponses) GetApiV1PaymentFormRenderPaymentIdWithResponse(ctx context.Context, paymentId string, params *GetApiV1PaymentFormRenderPaymentIdParams, reqEditors ...RequestEditorFn) (*GetApiV1PaymentFormRenderPaymentIdResponse, error) {
	rsp, err := c.GetApiV1PaymentFormRenderPaymentId(ctx, paymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PaymentFormRenderPaymentIdResponse(rsp)
}

// GetApiV1PaymentFormResultPaymentIdWithResponse request returning *GetApiV1PaymentFormResultPaymentIdResponse
func (c *ClientWithResponses) GetApiV1PaymentFormResultPaymentIdWithResponse(ctx context.Context, paymentId string, params *GetApiV1PaymentFormResultPaymentIdParams, reqEditors ...RequestEditorFn) (*GetApiV1PaymentFormResultPaymentIdResponse, error) {
	rsp, err := c.GetApiV1PaymentFormResultPaymentId(ctx, paymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PaymentFormResultPaymentIdResponse(rsp)
}

// PostApiV1PaymentFormSubmitWithBodyWithResponse request with arbitrary body returning *PostApiV1PaymentFormSubmitResponse
func (c *ClientWithResponses) PostApiV1PaymentFormSubmitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PaymentFormSubmitResponse, error) {
	rsp, err := c.PostApiV1PaymentFormSubmitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentFormSubmitResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PaymentFormSubmitWithFormdataBodyWithResponse(ctx context.Context, body PostApiV1PaymentFormSubmitFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentFormSubmitResponse, error) {
	rsp, err := c.PostApiV1PaymentFormSubmitWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentFormSubmitResponse(rsp)
}

// PostApiV1PaymentInitInitWithBodyWithResponse request with arbitrary body returning *PostApiV1PaymentInitInitResponse
func (c *ClientWithResponses) PostApiV1PaymentInitInitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PaymentInitInitResponse, error) {
	rsp, err := c.PostApiV1PaymentInitInitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentInitInitResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PaymentInitInitWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV1PaymentInitInitApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentInitInitResponse, error) {
	rsp, err := c.PostApiV1PaymentInitInitWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentInitInitResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PaymentInitInitWithResponse(ctx context.Context, body PostApiV1PaymentInitInitJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PaymentInitInitResponse, error) {
	rsp, err := c.PostApiV1PaymentInitInit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PaymentInitInitResponse(rsp)
}

// GetApiV1PaymentInitMetricsTeamSlugWithResponse request returning *GetApiV1PaymentInitMetricsTeamSlugResponse
func (c *ClientWithResponses) GetApiV1PaymentInitMetricsTeamSlugWithResponse(ctx context.Context, teamSlug string, reqEditors ...RequestEditorFn) (*GetApiV1PaymentInitMetricsTeamSlugResponse, error) {
	rsp, err := c.GetApiV1PaymentInitMetricsTeamSlug(ctx, teamSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PaymentInitMetricsTeamSlugResponse(rsp)
}

// GetApiV1PaymentInitSessionPaymentIdWithResponse request returning *GetApiV1PaymentInitSessionPaymentIdResponse
func (c *ClientWithResponses) GetApiV1PaymentInitSessionPaymentIdWithResponse(ctx context.Context, paymentId string, reqEditors ...RequestEditorFn) (*GetApiV1PaymentInitSessionPaymentIdResponse, error) {
	rsp, err := c.GetApiV1PaymentInitSessionPaymentId(ctx, paymentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PaymentInitSessionPaymentIdResponse(rsp)
}

// GetApiV1TeamRegistrationCheckAvailabilityTeamSlugWithResponse request returning *GetApiV1TeamRegistrationCheckAvailabilityTeamSlugResponse
func (c *ClientWithResponses) GetApiV1TeamRegistrationCheckAvailabilityTeamSlugWithResponse(ctx context.Context, teamSlug string, reqEditors ...RequestEditorFn) (*GetApiV1TeamRegistrationCheckAvailabilityTeamSlugResponse, error) {
	rsp, err := c.GetApiV1TeamRegistrationCheckAvailabilityTeamSlug(ctx, teamSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1TeamRegistrationCheckAvailabilityTeamSlugResponse(rsp)
}

// PostApiV1TeamRegistrationRegisterWithBodyWithResponse request with arbitrary body returning *PostApiV1TeamRegistrationRegisterResponse
func (c *ClientWithResponses) PostApiV1TeamRegistrationRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1TeamRegistrationRegisterResponse, error) {
	rsp, err := c.PostApiV1TeamRegistrationRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1TeamRegistrationRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1TeamRegistrationRegisterWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiV1TeamRegistrationRegisterApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1TeamRegistrationRegisterResponse, error) {
	rsp, err := c.PostApiV1TeamRegistrationRegisterWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1TeamRegistrationRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1TeamRegistrationRegisterWithResponse(ctx context.Context, body PostApiV1TeamRegistrationRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1TeamRegistrationRegisterResponse, error) {
	rsp, err := c.PostApiV1TeamRegistrationRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1TeamRegistrationRegisterResponse(rsp)
}

// GetApiV1TeamRegistrationStatusTeamSlugWithResponse request returning *GetApiV1TeamRegistrationStatusTeamSlugResponse
func (c *ClientWithResponses) GetApiV1TeamRegistrationStatusTeamSlugWithResponse(ctx context.Context, teamSlug string, reqEditors ...RequestEditorFn) (*GetApiV1TeamRegistrationStatusTeamSlugResponse, error) {
	rsp, err := c.GetApiV1TeamRegistrationStatusTeamSlug(ctx, teamSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1TeamRegistrationStatusTeamSlugResponse(rsp)
}

// ParseGetApiMetricsDashboardResponse parses an HTTP response from a GetApiMetricsDashboardWithResponse call
func ParseGetApiMetricsDashboardResponse(rsp *http.Response) (*GetApiMetricsDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMetricsDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiMetricsPaymentsResponse parses an HTTP response from a GetApiMetricsPaymentsWithResponse call
func ParseGetApiMetricsPaymentsResponse(rsp *http.Response) (*GetApiMetricsPaymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMetricsPaymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiMetricsResetResponse parses an HTTP response from a PostApiMetricsResetWithResponse call
func ParsePostApiMetricsResetResponse(rsp *http.Response) (*PostApiMetricsResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiMetricsResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiMetricsSummaryResponse parses an HTTP response from a GetApiMetricsSummaryWithResponse call
func ParseGetApiMetricsSummaryResponse(rsp *http.Response) (*GetApiMetricsSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMetricsSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetricsSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiMetricsSystemResponse parses an HTTP response from a GetApiMetricsSystemWithResponse call
func ParseGetApiMetricsSystemResponse(rsp *http.Response) (*GetApiMetricsSystemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiMetricsSystemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemMetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiV1AdminClearDatabaseResponse parses an HTTP response from a PostApiV1AdminClearDatabaseWithResponse call
func ParsePostApiV1AdminClearDatabaseResponse(rsp *http.Response) (*PostApiV1AdminClearDatabaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1AdminClearDatabaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminDataClearResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1AdminStatusResponse parses an HTTP response from a GetApiV1AdminStatusWithResponse call
func ParseGetApiV1AdminStatusResponse(rsp *http.Response) (*GetApiV1AdminStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AdminStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1PaymentCancelCancelResponse parses an HTTP response from a PostApiV1PaymentCancelCancelWithResponse call
func ParsePostApiV1PaymentCancelCancelResponse(rsp *http.Response) (*PostApiV1PaymentCancelCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PaymentCancelCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentCancelResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest PaymentCancelResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest PaymentCancelResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest PaymentCancelResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest PaymentCancelResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest PaymentCancelResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1PaymentCheckCheckResponse parses an HTTP response from a PostApiV1PaymentCheckCheckWithResponse call
func ParsePostApiV1PaymentCheckCheckResponse(rsp *http.Response) (*PostApiV1PaymentCheckCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PaymentCheckCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentCheckResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest PaymentCheckResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest PaymentCheckResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest PaymentCheckResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PaymentCheckStatusResponse parses an HTTP response from a GetApiV1PaymentCheckStatusWithResponse call
func ParseGetApiV1PaymentCheckStatusResponse(rsp *http.Response) (*GetApiV1PaymentCheckStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PaymentCheckStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentCheckResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest PaymentCheckResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest PaymentCheckResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostApiV1PaymentConfirmConfirmResponse parses an HTTP response from a PostApiV1PaymentConfirmConfirmWithResponse call
func ParsePostApiV1PaymentConfirmConfirmResponse(rsp *http.Response) (*PostApiV1PaymentConfirmConfirmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PaymentConfirmConfirmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentConfirmResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest PaymentConfirmResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest PaymentConfirmResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest PaymentConfirmResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest PaymentConfirmResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PaymentFormRenderPaymentIdResponse parses an HTTP response from a GetApiV1PaymentFormRenderPaymentIdWithResponse call
func ParseGetApiV1PaymentFormRenderPaymentIdResponse(rsp *http.Response) (*GetApiV1PaymentFormRenderPaymentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PaymentFormRenderPaymentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiV1PaymentFormResultPaymentIdResponse parses an HTTP response from a GetApiV1PaymentFormResultPaymentIdWithResponse call
func ParseGetApiV1PaymentFormResultPaymentIdResponse(rsp *http.Response) (*GetApiV1PaymentFormResultPaymentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PaymentFormResultPaymentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1PaymentFormSubmitResponse parses an HTTP response from a PostApiV1PaymentFormSubmitWithResponse call
func ParsePostApiV1PaymentFormSubmitResponse(rsp *http.Response) (*PostApiV1PaymentFormSubmitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PaymentFormSubmitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiV1PaymentInitInitResponse parses an HTTP response from a PostApiV1PaymentInitInitWithResponse call
func ParsePostApiV1PaymentInitInitResponse(rsp *http.Response) (*PostApiV1PaymentInitInitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PaymentInitInitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentInitResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest PaymentInitResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest PaymentInitResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest PaymentInitResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1PaymentInitMetricsTeamSlugResponse parses an HTTP response from a GetApiV1PaymentInitMetricsTeamSlugWithResponse call
func ParseGetApiV1PaymentInitMetricsTeamSlugResponse(rsp *http.Response) (*GetApiV1PaymentInitMetricsTeamSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PaymentInitMetricsTeamSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetApiV1PaymentInitSessionPaymentIdResponse parses an HTTP response from a GetApiV1PaymentInitSessionPaymentIdWithResponse call
func ParseGetApiV1PaymentInitSessionPaymentIdResponse(rsp *http.Response) (*GetApiV1PaymentInitSessionPaymentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PaymentInitSessionPaymentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApiV1TeamRegistrationCheckAvailabilityTeamSlugResponse parses an HTTP response from a GetApiV1TeamRegistrationCheckAvailabilityTeamSlugWithResponse call
func ParseGetApiV1TeamRegistrationCheckAvailabilityTeamSlugResponse(rsp *http.Response) (*GetApiV1TeamRegistrationCheckAvailabilityTeamSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1TeamRegistrationCheckAvailabilityTeamSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostApiV1TeamRegistrationRegisterResponse parses an HTTP response from a PostApiV1TeamRegistrationRegisterWithResponse call
func ParsePostApiV1TeamRegistrationRegisterResponse(rsp *http.Response) (*PostApiV1TeamRegistrationRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1TeamRegistrationRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TeamRegistrationResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest TeamRegistrationResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest TeamRegistrationResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TeamRegistrationResponseDto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1TeamRegistrationStatusTeamSlugResponse parses an HTTP response from a GetApiV1TeamRegistrationStatusTeamSlugWithResponse call
func ParseGetApiV1TeamRegistrationStatusTeamSlugResponse(rsp *http.Response) (*GetApiV1TeamRegistrationStatusTeamSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1TeamRegistrationStatusTeamSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
