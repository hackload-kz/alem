// Package eventprovider provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package eventprovider

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for OrderStatus.
const (
	CANCELLED OrderStatus = "CANCELLED"
	CONFIRMED OrderStatus = "CONFIRMED"
	STARTED   OrderStatus = "STARTED"
	SUBMITTED OrderStatus = "SUBMITTED"
)

// CreatePlaceRequest defines model for CreatePlaceRequest.
type CreatePlaceRequest struct {
	// Row Row number in the venue
	Row int `json:"row"`

	// Seat Seat number in the row
	Seat int `json:"seat"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error code identifying the specific error type
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// Order defines model for Order.
type Order struct {
	// Id Unique identifier for the order
	Id openapi_types.UUID `json:"id"`

	// PlacesCount Number of places selected for this order
	PlacesCount int `json:"places_count"`

	// StartedAt Timestamp when the order was started (Unix timestamp in milliseconds)
	StartedAt int64 `json:"started_at"`

	// Status Current status of the order
	Status OrderStatus `json:"status"`

	// UpdatedAt Timestamp when the order was last updated (Unix timestamp in milliseconds)
	UpdatedAt int64 `json:"updated_at"`
}

// OrderStatus Current status of the order
type OrderStatus string

// OrderCreatedResponse defines model for OrderCreatedResponse.
type OrderCreatedResponse struct {
	// OrderId Unique identifier for the created order
	OrderId openapi_types.UUID `json:"order_id"`
}

// Place defines model for Place.
type Place struct {
	// Id Unique identifier for the place
	Id openapi_types.UUID `json:"id"`

	// IsFree Whether the place is available for selection
	IsFree bool `json:"is_free"`

	// Row Row number in the venue
	Row int `json:"row"`

	// Seat Seat number in the row
	Seat int `json:"seat"`
}

// SelectPlaceRequest defines model for SelectPlaceRequest.
type SelectPlaceRequest struct {
	// OrderId ID of the order to select the place for
	OrderId openapi_types.UUID `json:"order_id"`
}

// OrderId defines model for OrderId.
type OrderId = openapi_types.UUID

// PlaceId defines model for PlaceId.
type PlaceId = openapi_types.UUID

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// UnprocessableEntity defines model for UnprocessableEntity.
type UnprocessableEntity = ErrorResponse

// ListPlacesParams defines parameters for ListPlaces.
type ListPlacesParams struct {
	// Page Page number (minimum 1)
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Items per page (maximum 1000)
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// CreatePlaceJSONRequestBody defines body for CreatePlace for application/json ContentType.
type CreatePlaceJSONRequestBody = CreatePlaceRequest

// SelectPlaceJSONRequestBody defines body for SelectPlace for application/json ContentType.
type SelectPlaceJSONRequestBody = SelectPlaceRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreatePlaceWithBody request with any body
	CreatePlaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlace(ctx context.Context, body CreatePlaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartOrder request
	StartOrder(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrder request
	GetOrder(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelOrder request
	CancelOrder(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfirmOrder request
	ConfirmOrder(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitOrder request
	SubmitOrder(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlaces request
	ListPlaces(ctx context.Context, params *ListPlacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlace request
	GetPlace(ctx context.Context, id PlaceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReleasePlace request
	ReleasePlace(ctx context.Context, id PlaceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SelectPlaceWithBody request with any body
	SelectPlaceWithBody(ctx context.Context, id PlaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SelectPlace(ctx context.Context, id PlaceId, body SelectPlaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreatePlaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlace(ctx context.Context, body CreatePlaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartOrder(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartOrderRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrder(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelOrder(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelOrderRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmOrder(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmOrderRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitOrder(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitOrderRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlaces(ctx context.Context, params *ListPlacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlace(ctx context.Context, id PlaceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlaceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReleasePlace(ctx context.Context, id PlaceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReleasePlaceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SelectPlaceWithBody(ctx context.Context, id PlaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSelectPlaceRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SelectPlace(ctx context.Context, id PlaceId, body SelectPlaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSelectPlaceRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreatePlaceRequest calls the generic CreatePlace builder with application/json body
func NewCreatePlaceRequest(server string, body CreatePlaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlaceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePlaceRequestWithBody generates requests for CreatePlace with any type of body
func NewCreatePlaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/admin/v1/places")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStartOrderRequest generates requests for StartOrder
func NewStartOrderRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/partners/v1/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrderRequest generates requests for GetOrder
func NewGetOrderRequest(server string, id OrderId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/partners/v1/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelOrderRequest generates requests for CancelOrder
func NewCancelOrderRequest(server string, id OrderId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/partners/v1/orders/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfirmOrderRequest generates requests for ConfirmOrder
func NewConfirmOrderRequest(server string, id OrderId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/partners/v1/orders/%s/confirm", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitOrderRequest generates requests for SubmitOrder
func NewSubmitOrderRequest(server string, id OrderId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/partners/v1/orders/%s/submit", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPlacesRequest generates requests for ListPlaces
func NewListPlacesRequest(server string, params *ListPlacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/partners/v1/places")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlaceRequest generates requests for GetPlace
func NewGetPlaceRequest(server string, id PlaceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/partners/v1/places/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReleasePlaceRequest generates requests for ReleasePlace
func NewReleasePlaceRequest(server string, id PlaceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/partners/v1/places/%s/release", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSelectPlaceRequest calls the generic SelectPlace builder with application/json body
func NewSelectPlaceRequest(server string, id PlaceId, body SelectPlaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSelectPlaceRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSelectPlaceRequestWithBody generates requests for SelectPlace with any type of body
func NewSelectPlaceRequestWithBody(server string, id PlaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/partners/v1/places/%s/select", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreatePlaceWithBodyWithResponse request with any body
	CreatePlaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaceResponse, error)

	CreatePlaceWithResponse(ctx context.Context, body CreatePlaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlaceResponse, error)

	// StartOrderWithResponse request
	StartOrderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StartOrderResponse, error)

	// GetOrderWithResponse request
	GetOrderWithResponse(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*GetOrderResponse, error)

	// CancelOrderWithResponse request
	CancelOrderWithResponse(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*CancelOrderResponse, error)

	// ConfirmOrderWithResponse request
	ConfirmOrderWithResponse(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*ConfirmOrderResponse, error)

	// SubmitOrderWithResponse request
	SubmitOrderWithResponse(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*SubmitOrderResponse, error)

	// ListPlacesWithResponse request
	ListPlacesWithResponse(ctx context.Context, params *ListPlacesParams, reqEditors ...RequestEditorFn) (*ListPlacesResponse, error)

	// GetPlaceWithResponse request
	GetPlaceWithResponse(ctx context.Context, id PlaceId, reqEditors ...RequestEditorFn) (*GetPlaceResponse, error)

	// ReleasePlaceWithResponse request
	ReleasePlaceWithResponse(ctx context.Context, id PlaceId, reqEditors ...RequestEditorFn) (*ReleasePlaceResponse, error)

	// SelectPlaceWithBodyWithResponse request with any body
	SelectPlaceWithBodyWithResponse(ctx context.Context, id PlaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SelectPlaceResponse, error)

	SelectPlaceWithResponse(ctx context.Context, id PlaceId, body SelectPlaceJSONRequestBody, reqEditors ...RequestEditorFn) (*SelectPlaceResponse, error)
}

type CreatePlaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Place
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CreatePlaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OrderCreatedResponse
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r StartOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSON409      *ErrorResponse
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r CancelOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfirmOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSON409      *ErrorResponse
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ConfirmOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfirmOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSON409      *ErrorResponse
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r SubmitOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Place
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ListPlacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Place
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetPlaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReleasePlaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *ErrorResponse
	JSON404      *NotFound
	JSON409      *ErrorResponse
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r ReleasePlaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReleasePlaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SelectPlaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFound
	JSON409      *ErrorResponse
	JSON422      *UnprocessableEntity
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r SelectPlaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SelectPlaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreatePlaceWithBodyWithResponse request with arbitrary body returning *CreatePlaceResponse
func (c *ClientWithResponses) CreatePlaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlaceResponse, error) {
	rsp, err := c.CreatePlaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaceResponse(rsp)
}

func (c *ClientWithResponses) CreatePlaceWithResponse(ctx context.Context, body CreatePlaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlaceResponse, error) {
	rsp, err := c.CreatePlace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlaceResponse(rsp)
}

// StartOrderWithResponse request returning *StartOrderResponse
func (c *ClientWithResponses) StartOrderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*StartOrderResponse, error) {
	rsp, err := c.StartOrder(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartOrderResponse(rsp)
}

// GetOrderWithResponse request returning *GetOrderResponse
func (c *ClientWithResponses) GetOrderWithResponse(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*GetOrderResponse, error) {
	rsp, err := c.GetOrder(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderResponse(rsp)
}

// CancelOrderWithResponse request returning *CancelOrderResponse
func (c *ClientWithResponses) CancelOrderWithResponse(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*CancelOrderResponse, error) {
	rsp, err := c.CancelOrder(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelOrderResponse(rsp)
}

// ConfirmOrderWithResponse request returning *ConfirmOrderResponse
func (c *ClientWithResponses) ConfirmOrderWithResponse(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*ConfirmOrderResponse, error) {
	rsp, err := c.ConfirmOrder(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmOrderResponse(rsp)
}

// SubmitOrderWithResponse request returning *SubmitOrderResponse
func (c *ClientWithResponses) SubmitOrderWithResponse(ctx context.Context, id OrderId, reqEditors ...RequestEditorFn) (*SubmitOrderResponse, error) {
	rsp, err := c.SubmitOrder(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitOrderResponse(rsp)
}

// ListPlacesWithResponse request returning *ListPlacesResponse
func (c *ClientWithResponses) ListPlacesWithResponse(ctx context.Context, params *ListPlacesParams, reqEditors ...RequestEditorFn) (*ListPlacesResponse, error) {
	rsp, err := c.ListPlaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlacesResponse(rsp)
}

// GetPlaceWithResponse request returning *GetPlaceResponse
func (c *ClientWithResponses) GetPlaceWithResponse(ctx context.Context, id PlaceId, reqEditors ...RequestEditorFn) (*GetPlaceResponse, error) {
	rsp, err := c.GetPlace(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlaceResponse(rsp)
}

// ReleasePlaceWithResponse request returning *ReleasePlaceResponse
func (c *ClientWithResponses) ReleasePlaceWithResponse(ctx context.Context, id PlaceId, reqEditors ...RequestEditorFn) (*ReleasePlaceResponse, error) {
	rsp, err := c.ReleasePlace(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReleasePlaceResponse(rsp)
}

// SelectPlaceWithBodyWithResponse request with arbitrary body returning *SelectPlaceResponse
func (c *ClientWithResponses) SelectPlaceWithBodyWithResponse(ctx context.Context, id PlaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SelectPlaceResponse, error) {
	rsp, err := c.SelectPlaceWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSelectPlaceResponse(rsp)
}

func (c *ClientWithResponses) SelectPlaceWithResponse(ctx context.Context, id PlaceId, body SelectPlaceJSONRequestBody, reqEditors ...RequestEditorFn) (*SelectPlaceResponse, error) {
	rsp, err := c.SelectPlace(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSelectPlaceResponse(rsp)
}

// ParseCreatePlaceResponse parses an HTTP response from a CreatePlaceWithResponse call
func ParseCreatePlaceResponse(rsp *http.Response) (*CreatePlaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Place
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseStartOrderResponse parses an HTTP response from a StartOrderWithResponse call
func ParseStartOrderResponse(rsp *http.Response) (*StartOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OrderCreatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOrderResponse parses an HTTP response from a GetOrderWithResponse call
func ParseGetOrderResponse(rsp *http.Response) (*GetOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCancelOrderResponse parses an HTTP response from a CancelOrderWithResponse call
func ParseCancelOrderResponse(rsp *http.Response) (*CancelOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseConfirmOrderResponse parses an HTTP response from a ConfirmOrderWithResponse call
func ParseConfirmOrderResponse(rsp *http.Response) (*ConfirmOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfirmOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSubmitOrderResponse parses an HTTP response from a SubmitOrderWithResponse call
func ParseSubmitOrderResponse(rsp *http.Response) (*SubmitOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListPlacesResponse parses an HTTP response from a ListPlacesWithResponse call
func ParseListPlacesResponse(rsp *http.Response) (*ListPlacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Place
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPlaceResponse parses an HTTP response from a GetPlaceWithResponse call
func ParseGetPlaceResponse(rsp *http.Response) (*GetPlaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Place
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseReleasePlaceResponse parses an HTTP response from a ReleasePlaceWithResponse call
func ParseReleasePlaceResponse(rsp *http.Response) (*ReleasePlaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReleasePlaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSelectPlaceResponse parses an HTTP response from a SelectPlaceWithResponse call
func ParseSelectPlaceResponse(rsp *http.Response) (*SelectPlaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SelectPlaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
