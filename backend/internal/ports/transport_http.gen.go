// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package ports

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ListSeatsResponseItemStatus.
const (
	ListSeatsResponseItemStatusFREE     ListSeatsResponseItemStatus = "FREE"
	ListSeatsResponseItemStatusRESERVED ListSeatsResponseItemStatus = "RESERVED"
	ListSeatsResponseItemStatusSOLD     ListSeatsResponseItemStatus = "SOLD"
)

// Defines values for ListSeatsParamsStatus.
const (
	ListSeatsParamsStatusFREE     ListSeatsParamsStatus = "FREE"
	ListSeatsParamsStatusRESERVED ListSeatsParamsStatus = "RESERVED"
	ListSeatsParamsStatusSOLD     ListSeatsParamsStatus = "SOLD"
)

// AnalyticsResponse defines model for AnalyticsResponse.
type AnalyticsResponse struct {
	BookingsCount int32  `json:"bookings_count"`
	EventId       int64  `json:"event_id"`
	FreeSeats     int32  `json:"free_seats"`
	ReservedSeats int32  `json:"reserved_seats"`
	SoldSeats     int32  `json:"sold_seats"`
	TotalRevenue  string `json:"total_revenue"`
	TotalSeats    int32  `json:"total_seats"`
}

// CancelBookingRequest defines model for CancelBookingRequest.
type CancelBookingRequest struct {
	BookingId int64 `json:"booking_id"`
}

// CreateBookingRequest defines model for CreateBookingRequest.
type CreateBookingRequest struct {
	EventId int64 `json:"event_id"`
}

// CreateBookingResponse defines model for CreateBookingResponse.
type CreateBookingResponse struct {
	Id int64 `json:"id"`
}

// InitiatePaymentRequest defines model for InitiatePaymentRequest.
type InitiatePaymentRequest struct {
	BookingId int64 `json:"booking_id"`
}

// ListBookingsResponse defines model for ListBookingsResponse.
type ListBookingsResponse = []ListBookingsResponseItem

// ListBookingsResponseItem defines model for ListBookingsResponseItem.
type ListBookingsResponseItem struct {
	EventId int64                         `json:"event_id"`
	Id      int64                         `json:"id"`
	Seats   *[]ListEventsResponseItemSeat `json:"seats,omitempty"`
}

// ListEventsResponse defines model for ListEventsResponse.
type ListEventsResponse = []ListEventsResponseItem

// ListEventsResponseItem defines model for ListEventsResponseItem.
type ListEventsResponseItem struct {
	Id    int64  `json:"id"`
	Title string `json:"title"`
}

// ListEventsResponseItemSeat defines model for ListEventsResponseItemSeat.
type ListEventsResponseItemSeat struct {
	Id int64 `json:"id"`
}

// ListSeatsResponse defines model for ListSeatsResponse.
type ListSeatsResponse = []ListSeatsResponseItem

// ListSeatsResponseItem defines model for ListSeatsResponseItem.
type ListSeatsResponseItem struct {
	Id     int64                       `json:"id"`
	Number int64                       `json:"number"`
	Price  string                      `json:"price"`
	Row    int64                       `json:"row"`
	Status ListSeatsResponseItemStatus `json:"status"`
}

// ListSeatsResponseItemStatus defines model for ListSeatsResponseItem.Status.
type ListSeatsResponseItemStatus string

// PaymentNotificationPayload defines model for PaymentNotificationPayload.
type PaymentNotificationPayload struct {
	Data      *map[string]map[string]interface{} `json:"data,omitempty"`
	PaymentId *string                            `json:"paymentId,omitempty"`
	Status    *string                            `json:"status,omitempty"`
	TeamSlug  *string                            `json:"teamSlug,omitempty"`
	Timestamp *time.Time                         `json:"timestamp,omitempty"`
}

// ReleaseSeatRequest defines model for ReleaseSeatRequest.
type ReleaseSeatRequest struct {
	SeatId int64 `json:"seat_id"`
}

// SelectSeatRequest defines model for SelectSeatRequest.
type SelectSeatRequest struct {
	BookingId int64 `json:"booking_id"`
	SeatId    int64 `json:"seat_id"`
}

// GetEventAnalyticsParams defines parameters for GetEventAnalytics.
type GetEventAnalyticsParams struct {
	// Id ID события для получения аналитики
	Id int64 `form:"id" json:"id"`
}

// ListEventsParams defines parameters for ListEvents.
type ListEventsParams struct {
	// Query Параметр для полноконтекстного поиска
	Query *string `form:"query,omitempty" json:"query,omitempty"`

	// Date Параметр для фильтрации по дате события
	Date     *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
	Page     *int32              `form:"page,omitempty" json:"page,omitempty"`
	PageSize *int32              `form:"pageSize,omitempty" json:"pageSize,omitempty"`
}

// NotifyPaymentFailedParams defines parameters for NotifyPaymentFailed.
type NotifyPaymentFailedParams struct {
	OrderId int64 `form:"orderId" json:"orderId"`
}

// NotifyPaymentCompletedParams defines parameters for NotifyPaymentCompleted.
type NotifyPaymentCompletedParams struct {
	OrderId int64 `form:"orderId" json:"orderId"`
}

// ListSeatsParams defines parameters for ListSeats.
type ListSeatsParams struct {
	Page     *int32                 `form:"page,omitempty" json:"page,omitempty"`
	PageSize *int32                 `form:"pageSize,omitempty" json:"pageSize,omitempty"`
	EventId  int64                  `form:"event_id" json:"event_id"`
	Row      *int32                 `form:"row,omitempty" json:"row,omitempty"`
	Status   *ListSeatsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
}

// ListSeatsParamsStatus defines parameters for ListSeats.
type ListSeatsParamsStatus string

// CreateBookingJSONRequestBody defines body for CreateBooking for application/json ContentType.
type CreateBookingJSONRequestBody = CreateBookingRequest

// CancelBookingJSONRequestBody defines body for CancelBooking for application/json ContentType.
type CancelBookingJSONRequestBody = CancelBookingRequest

// InitiatePaymentJSONRequestBody defines body for InitiatePayment for application/json ContentType.
type InitiatePaymentJSONRequestBody = InitiatePaymentRequest

// OnPaymentUpdatesJSONRequestBody defines body for OnPaymentUpdates for application/json ContentType.
type OnPaymentUpdatesJSONRequestBody = PaymentNotificationPayload

// ReleaseSeatJSONRequestBody defines body for ReleaseSeat for application/json ContentType.
type ReleaseSeatJSONRequestBody = ReleaseSeatRequest

// SelectSeatJSONRequestBody defines body for SelectSeat for application/json ContentType.
type SelectSeatJSONRequestBody = SelectSeatRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить аналитику продаж для события
	// (GET /api/analytics)
	GetEventAnalytics(w http.ResponseWriter, r *http.Request, params GetEventAnalyticsParams)
	// Получить список бронирований
	// (GET /api/bookings)
	ListBookings(w http.ResponseWriter, r *http.Request)
	// Создать бронирование
	// (POST /api/bookings)
	CreateBooking(w http.ResponseWriter, r *http.Request)
	// Отменить бронирование
	// (PATCH /api/bookings/cancel)
	CancelBooking(w http.ResponseWriter, r *http.Request)
	// Инициировать платеж для бронирования
	// (PATCH /api/bookings/initiatePayment)
	InitiatePayment(w http.ResponseWriter, r *http.Request)
	// Получить список событий
	// (GET /api/events)
	ListEvents(w http.ResponseWriter, r *http.Request, params ListEventsParams)
	// Уведомить сервис, что платеж неуспешно проведен
	// (GET /api/payments/fail)
	NotifyPaymentFailed(w http.ResponseWriter, r *http.Request, params NotifyPaymentFailedParams)
	// Принимать уведомления от платежного шлюза
	// (POST /api/payments/notifications)
	OnPaymentUpdates(w http.ResponseWriter, r *http.Request)
	// Уведомить сервис, что платеж успешно проведен
	// (GET /api/payments/success)
	NotifyPaymentCompleted(w http.ResponseWriter, r *http.Request, params NotifyPaymentCompletedParams)
	// Сбросить базу данных
	// (POST /api/reset)
	ResetDatabase(w http.ResponseWriter, r *http.Request)
	// Получить список мест
	// (GET /api/seats)
	ListSeats(w http.ResponseWriter, r *http.Request, params ListSeatsParams)
	// Убрать место из брони
	// (PATCH /api/seats/release)
	ReleaseSeat(w http.ResponseWriter, r *http.Request)
	// Выбрать место для брони
	// (PATCH /api/seats/select)
	SelectSeat(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetEventAnalytics operation middleware
func (siw *ServerInterfaceWrapper) GetEventAnalytics(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventAnalyticsParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventAnalytics(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListBookings operation middleware
func (siw *ServerInterfaceWrapper) ListBookings(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBookings(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateBooking operation middleware
func (siw *ServerInterfaceWrapper) CreateBooking(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBooking(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CancelBooking operation middleware
func (siw *ServerInterfaceWrapper) CancelBooking(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CancelBooking(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// InitiatePayment operation middleware
func (siw *ServerInterfaceWrapper) InitiatePayment(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InitiatePayment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventsParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", r.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "date", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEvents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// NotifyPaymentFailed operation middleware
func (siw *ServerInterfaceWrapper) NotifyPaymentFailed(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params NotifyPaymentFailedParams

	// ------------- Required query parameter "orderId" -------------

	if paramValue := r.URL.Query().Get("orderId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "orderId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "orderId", r.URL.Query(), &params.OrderId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.NotifyPaymentFailed(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OnPaymentUpdates operation middleware
func (siw *ServerInterfaceWrapper) OnPaymentUpdates(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OnPaymentUpdates(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// NotifyPaymentCompleted operation middleware
func (siw *ServerInterfaceWrapper) NotifyPaymentCompleted(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params NotifyPaymentCompletedParams

	// ------------- Required query parameter "orderId" -------------

	if paramValue := r.URL.Query().Get("orderId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "orderId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "orderId", r.URL.Query(), &params.OrderId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.NotifyPaymentCompleted(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ResetDatabase operation middleware
func (siw *ServerInterfaceWrapper) ResetDatabase(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetDatabase(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListSeats operation middleware
func (siw *ServerInterfaceWrapper) ListSeats(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSeatsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "pageSize", Err: err})
		return
	}

	// ------------- Required query parameter "event_id" -------------

	if paramValue := r.URL.Query().Get("event_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "event_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "event_id", r.URL.Query(), &params.EventId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "event_id", Err: err})
		return
	}

	// ------------- Optional query parameter "row" -------------

	err = runtime.BindQueryParameter("form", true, false, "row", r.URL.Query(), &params.Row)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "row", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSeats(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReleaseSeat operation middleware
func (siw *ServerInterfaceWrapper) ReleaseSeat(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReleaseSeat(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SelectSeat operation middleware
func (siw *ServerInterfaceWrapper) SelectSeat(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SelectSeat(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/analytics", wrapper.GetEventAnalytics).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/bookings", wrapper.ListBookings).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/bookings", wrapper.CreateBooking).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/bookings/cancel", wrapper.CancelBooking).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/bookings/initiatePayment", wrapper.InitiatePayment).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/events", wrapper.ListEvents).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/payments/fail", wrapper.NotifyPaymentFailed).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/payments/notifications", wrapper.OnPaymentUpdates).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/payments/success", wrapper.NotifyPaymentCompleted).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/reset", wrapper.ResetDatabase).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/seats", wrapper.ListSeats).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/seats/release", wrapper.ReleaseSeat).Methods("PATCH")

	r.HandleFunc(options.BaseURL+"/api/seats/select", wrapper.SelectSeat).Methods("PATCH")

	return r
}
