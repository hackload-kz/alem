// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: seats.sql

package sqlc

import (
	"context"
)

const getSeats = `-- name: GetSeats :many
select
  id, event_id, external_id, "row", number, price, status
from seats s
where 1=1
  and ?1 = s.event_id
  and (
    cast(?2 as integer) is null
    or cast(?2 as integer) = s.row 
  )
  and (
    cast(?3 as text) is null
    or cast(?3 as text) = s.status
  )
limit ?5
offset ?4
`

type GetSeatsParams struct {
	EventID int64
	Row     *int64
	Status  *string
	Offset  int64
	Limit   int64
}

func (q *Queries) GetSeats(ctx context.Context, arg GetSeatsParams) ([]Seat, error) {
	rows, err := q.db.QueryContext(ctx, getSeats,
		arg.EventID,
		arg.Row,
		arg.Status,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Seat
	for rows.Next() {
		var i Seat
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.ExternalID,
			&i.Row,
			&i.Number,
			&i.Price,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSeatStatus = `-- name: UpdateSeatStatus :exec
;

update seats 
set status = ?1
where id = ?2
`

type UpdateSeatStatusParams struct {
	Status string
	SeatID int64
}

func (q *Queries) UpdateSeatStatus(ctx context.Context, arg UpdateSeatStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateSeatStatus, arg.Status, arg.SeatID)
	return err
}
