// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: seats.sql

package sqlc

import (
	"context"
	"database/sql"
	"strings"
)

const deleteAllSeats = `-- name: DeleteAllSeats :execresult
;

DELETE FROM seats
`

func (q *Queries) DeleteAllSeats(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteAllSeats)
}

const getSeatByID = `-- name: GetSeatByID :one
;

select id, event_id, external_id, "row", number, price, status from seats
where id = ?1
`

func (q *Queries) GetSeatByID(ctx context.Context, seatID int64) (Seat, error) {
	row := q.db.QueryRowContext(ctx, getSeatByID, seatID)
	var i Seat
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.ExternalID,
		&i.Row,
		&i.Number,
		&i.Price,
		&i.Status,
	)
	return i, err
}

const getSeats = `-- name: GetSeats :many
select
  id, event_id, external_id, "row", number, price, status
from seats s
where 1=1
  and ?1 = s.event_id
  and (
    cast(?2 as integer) is null
    or cast(?2 as integer) = s.row 
  )
  and (
    cast(?3 as text) is null
    or cast(?3 as text) = s.status
  )
limit ?5
offset ?4
`

type GetSeatsParams struct {
	EventID int64
	Row     *int64
	Status  *string
	Offset  int64
	Limit   int64
}

func (q *Queries) GetSeats(ctx context.Context, arg GetSeatsParams) ([]Seat, error) {
	rows, err := q.db.QueryContext(ctx, getSeats,
		arg.EventID,
		arg.Row,
		arg.Status,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Seat
	for rows.Next() {
		var i Seat
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.ExternalID,
			&i.Row,
			&i.Number,
			&i.Price,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSeat = `-- name: InsertSeat :exec
INSERT INTO seats (event_id, external_id, row, number, price, status)
VALUES (?1, ?2, ?3, ?4, ?5, ?6)
`

type InsertSeatParams struct {
	EventID    int64
	ExternalID *string
	Row        int64
	Number     int64
	Price      string
	Status     string
}

func (q *Queries) InsertSeat(ctx context.Context, arg InsertSeatParams) error {
	_, err := q.db.ExecContext(ctx, insertSeat,
		arg.EventID,
		arg.ExternalID,
		arg.Row,
		arg.Number,
		arg.Price,
		arg.Status,
	)
	return err
}

const updateSeatStatus = `-- name: UpdateSeatStatus :exec
;

update seats 
set status = ?1
where id = ?2
`

type UpdateSeatStatusParams struct {
	Status string
	SeatID int64
}

func (q *Queries) UpdateSeatStatus(ctx context.Context, arg UpdateSeatStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateSeatStatus, arg.Status, arg.SeatID)
	return err
}

const updateSeatsStatusByIDs = `-- name: UpdateSeatsStatusByIDs :exec
;

update seats 
set status = ?1
where id IN (/*SLICE:seat_ids*/?)
`

type UpdateSeatsStatusByIDsParams struct {
	Status  string
	SeatIds []int64
}

func (q *Queries) UpdateSeatsStatusByIDs(ctx context.Context, arg UpdateSeatsStatusByIDsParams) error {
	query := updateSeatsStatusByIDs
	var queryParams []interface{}
	queryParams = append(queryParams, arg.Status)
	if len(arg.SeatIds) > 0 {
		for _, v := range arg.SeatIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:seat_ids*/?", strings.Repeat(",?", len(arg.SeatIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:seat_ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}
