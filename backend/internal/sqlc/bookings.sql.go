// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bookings.sql

package sqlc

import (
	"context"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO bookings (user_id, event_id, status)
VALUES (?1, ?2, 'CREATED')
RETURNING id
`

type CreateBookingParams struct {
	UserID  int64
	EventID int64
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createBooking, arg.UserID, arg.EventID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getBookings = `-- name: GetBookings :many
select
  b.id,
  b.event_id,
  CASE 
    WHEN COUNT(bs.seat_id) = 0 THEN cast(json_array() as text)
    ELSE cast(
      json_group_array(json_object('id', bs.seat_id))
      as text
    )
  END AS seats
from bookings b
left join booking_seats as bs on bs.booking_id = b.id
where 1=1
  and ?1 = b.user_id
group by b.id, b.event_id
`

type GetBookingsRow struct {
	ID      int64
	EventID int64
	Seats   string
}

func (q *Queries) GetBookings(ctx context.Context, userID int64) ([]GetBookingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBookings, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookingsRow
	for rows.Next() {
		var i GetBookingsRow
		if err := rows.Scan(&i.ID, &i.EventID, &i.Seats); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
