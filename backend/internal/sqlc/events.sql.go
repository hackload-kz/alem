// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: events.sql

package sqlc

import (
	"context"
)

const getEventsList = `-- name: GetEventsList :many
select
    e.id,
    e.title
from events_archive e
where 1=1
    and (
        cast(?1 as text) is null 
        or cast(?1 as text) like '%' || e.title || '%'
        or cast(?1 as text) like '%' || e.description || '%'
    )
    and (
        cast(?2 as date) is null 
        or cast(?2 as date) = e.date_start
    )
limit ?4
offset ?3
`

type GetEventsListParams struct {
	Query  *string
	Date   *string
	Offset int64
	Limit  int64
}

type GetEventsListRow struct {
	ID    int64
	Title *string
}

func (q *Queries) GetEventsList(ctx context.Context, arg GetEventsListParams) ([]GetEventsListRow, error) {
	rows, err := q.db.QueryContext(ctx, getEventsList,
		arg.Query,
		arg.Date,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsListRow
	for rows.Next() {
		var i GetEventsListRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
