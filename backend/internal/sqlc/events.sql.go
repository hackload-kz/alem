// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: events.sql

package sqlc

import (
	"context"
)

const getEventAnalytics = `-- name: GetEventAnalytics :one
;

select
    COUNT(*) as total_seats,
    SUM(CASE WHEN s.status = 'SOLD' THEN 1 ELSE 0 END) as sold_seats,
    SUM(CASE WHEN s.status = 'RESERVED' THEN 1 ELSE 0 END) as reserved_seats,
    SUM(CASE WHEN s.status = 'FREE' THEN 1 ELSE 0 END) as free_seats,
    cast(
        (COALESCE(SUM(CASE WHEN s.status = 'SOLD' THEN CAST(s.price AS REAL) ELSE 0 END), 0))
        as real
    ) as total_revenue,
    (
        select COUNT(DISTINCT b.id) 
        from bookings b 
        where b.event_id = ?1
    ) as bookings_count
from seats s
where s.event_id = ?1
`

type GetEventAnalyticsRow struct {
	TotalSeats    int64
	SoldSeats     *float64
	ReservedSeats *float64
	FreeSeats     *float64
	TotalRevenue  float64
	BookingsCount int64
}

func (q *Queries) GetEventAnalytics(ctx context.Context, eventID int64) (GetEventAnalyticsRow, error) {
	row := q.db.QueryRowContext(ctx, getEventAnalytics, eventID)
	var i GetEventAnalyticsRow
	err := row.Scan(
		&i.TotalSeats,
		&i.SoldSeats,
		&i.ReservedSeats,
		&i.FreeSeats,
		&i.TotalRevenue,
		&i.BookingsCount,
	)
	return i, err
}

const getEventsList = `-- name: GetEventsList :many
select
    e.id,
    e.title
from events_archive e
where 1=1
    and (
        cast(?1 as text) is null 
        or e.title like '%' || cast(?1 as text) || '%'
        or e.description like '%' || cast(?1 as text) || '%'
    )
    and (
        cast(?2 as date) is null 
        or cast(?2 as date) = e.date_start
    )
limit ?4
offset ?3
`

type GetEventsListParams struct {
	Query  *string
	Date   *string
	Offset int64
	Limit  int64
}

type GetEventsListRow struct {
	ID    int64
	Title *string
}

func (q *Queries) GetEventsList(ctx context.Context, arg GetEventsListParams) ([]GetEventsListRow, error) {
	rows, err := q.db.QueryContext(ctx, getEventsList,
		arg.Query,
		arg.Date,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsListRow
	for rows.Next() {
		var i GetEventsListRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
